import { DataPage, FilterParams, PagingParams } from "pip-services3-commons-nodex";
import { IProcessStatesClient } from "./IProcessStatesClient";
import { MessageV1 } from "./MessageV1";
import { ProcessStateV1 } from "./ProcessStateV1";
export declare class ProcessStatesMemoryClientV1 implements IProcessStatesClient {
    private _maxPageSize;
    private _items;
    private toStringArray;
    private matchString;
    private matchSearch;
    private composeFilter;
    getProcesses(correlationId: string, filter: FilterParams, paging: PagingParams): Promise<DataPage<ProcessStateV1>>;
    getProcessById(correlationId: string, id: string): Promise<ProcessStateV1>;
    startProcess(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1, timeToLive: number): Promise<ProcessStateV1>;
    activateOrStartProcess(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1, timeToLive: number): Promise<ProcessStateV1>;
    activateProcess(correlationId: string, processId: string, taskType: string, queueName: string, message: MessageV1): Promise<ProcessStateV1>;
    activateProcessByKey(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1): Promise<ProcessStateV1>;
    rollbackProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    continueProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    continueAndRecoverProcess(correlationId: string, state: ProcessStateV1, recoveryQueueName: string, recoveryMessage: MessageV1, recoveryTimeout: number): Promise<void>;
    repeatProcessRecovery(correlationId: string, state: ProcessStateV1, recoveryTimeout: number): Promise<void>;
    clearProcessRecovery(correlationId: string, state: ProcessStateV1): Promise<void>;
    failAndContinueProcess(correlationId: string, state: ProcessStateV1, errorMessage: string): Promise<void>;
    failAndRecoverProcess(correlationId: string, state: ProcessStateV1, errorMessage: string, recoveryQueueName: string, recoveryMessage: MessageV1, recoveryTimeout: number): Promise<void>;
    suspendProcess(correlationId: string, state: ProcessStateV1, request: string, recoveryQueue: string, recoveryMessage: MessageV1, recoveryTimeout: number): Promise<void>;
    failProcess(correlationId: string, state: ProcessStateV1, errorMessage: string): Promise<void>;
    resumeProcess(correlationId: string, state: ProcessStateV1, comment: string): Promise<ProcessStateV1>;
    completeProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    abortProcess(correlationId: string, state: ProcessStateV1, comment: string): Promise<void>;
    updateProcess(correlationId: string, state: ProcessStateV1): Promise<ProcessStateV1>;
    deleteProcessById(correlationId: string, processId: string): Promise<ProcessStateV1>;
    requestProcessForResponse(correlationId: string, state: ProcessStateV1, request: string, recoveryQueueName: string, recoveryMessage: MessageV1): Promise<ProcessStateV1>;
    private _getProcess;
    private getActiveByKey;
    private getActiveById;
    private _getProcessById;
    private _getActiveProcess;
    private _getProcessByState;
    create(correlationId: string, process: ProcessStateV1): Promise<ProcessStateV1>;
    protected update(correlationId: string, process: ProcessStateV1): Promise<ProcessStateV1>;
    protected deleteById(correlationId: string, id: string): Promise<ProcessStateV1>;
    getOneById(correlationId: string, id: string): Promise<ProcessStateV1>;
}
